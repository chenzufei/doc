

ELF可执行程序
.out 和 .elf 是两种计算机可执行文件格式，都是用来保存编译过后的程序代码的。
.out 格式是早期 Unix 系统使用的可执行文件格式，是一种简单的格式，不支持许多现代系统的特性，如动态链接库和符号表等。
.elf 格式是扩展的可执行文件格式，它支持多种平台，并且比 .out 格式更加丰富，支持许多现代系统的特性。


[root@localhost c]# readelf -a test4 | more
ELF Header:
  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00
  Class:                             ELF64
  Data:                              2's complement, little endian
  Version:                           1 (current)
  OS/ABI:                            UNIX - System V
  ABI Version:                       0
  Type:                              EXEC (Executable file)
  Machine:                           Advanced Micro Devices X86-64
  Version:                           0x1
  Entry point address:               0x400450
  Start of program headers:          64 (bytes into file)
  Start of section headers:          15496 (bytes into file)
  Flags:                             0x0
  Size of this header:               64 (bytes)
  Size of program headers:           56 (bytes)
  Number of program headers:         9
  Size of section headers:           64 (bytes)
  Number of section headers:         28
  Section header string table index: 27


[root@localhost c]# objdump -d test4 | more

test4:     file format elf64-x86-64


Disassembly of section .init:

0000000000400428 <_init>:
  400428:       f3 0f 1e fa             endbr64
  40042c:       48 83 ec 08             sub    $0x8,%rsp
  400430:       48 8b 05 b9 0b 20 00    mov    0x200bb9(%rip),%rax        # 600ff0 <__gmon_start__>
  400437:       48 85 c0                test   %rax,%rax
  40043a:       74 02                   je     40043e <_init+0x16>
  40043c:       ff d0                   callq  *%rax
  40043e:       48 83 c4 08             add    $0x8,%rsp
  400442:       c3                      retq

Disassembly of section .text:

0000000000400450 <_start>:
  400450:       f3 0f 1e fa             endbr64
  400454:       31 ed                   xor    %ebp,%ebp
  400456:       49 89 d1                mov    %rdx,%r9
  400459:       5e                      pop    %rsi
  40045a:       48 89 e2                mov    %rsp,%rdx
  40045d:       48 83 e4 f0             and    $0xfffffffffffffff0,%rsp
  400461:       50                      push   %rax
  400462:       54                      push   %rsp



[root@localhost c]# nm test4
0000000000400485 t .annobin__dl_relocate_static_pie.end
0000000000400480 t .annobin__dl_relocate_static_pie.start
0000000000400560 t .annobin_elf_init.c



objdump -i









